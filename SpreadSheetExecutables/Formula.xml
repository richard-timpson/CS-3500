<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Formula</name>
    </assembly>
    <members>
        <member name="T:SpreadsheetUtilities.Formula">
            <summary>
            Represents formulas written in standard infix notation using standard precedence
            rules.  The allowed symbols are non-negative numbers written using double-precision 
            floating-point syntax; variables that consist of a letter or underscore followed by 
            zero or more letters, underscores, or digits; parentheses; and the four operator 
            symbols +, -, *, and /.  
            
            Spaces are significant only insofar that they delimit tokens.  For example, "xy" is
            a single variable, "x y" consists of two variables "x" and y; "x23" is a single variable; 
            and "x 23" consists of a variable "x" and a number "23".
            
            Associated with every formula are two delegates:  a normalizer and a validator.  The
            normalizer is used to convert variables into a canonical form, and the validator is used
            to add extra restrictions on the validity of a variable (beyond the standard requirement 
            that it consist of a letter or underscore followed by zero or more letters, underscores,
            or digits.)  Their use is described in detail in the constructor and method comments.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.#ctor(System.String)">
            <summary>
            Creates a Formula from a string that consists of an infix expression written as
            described in the class comment.  If the expression is syntactically invalid,
            throws a FormulaFormatException with an explanatory Message.
            
            The associated normalizer is the identity function, and the associated validator
            maps every string to true.  
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.#ctor(System.String,System.Func{System.String,System.String},System.Func{System.String,System.Boolean})">
            <summary>
            Creates a Formula from a string that consists of an infix expression written as
            described in the class comment.  If the expression is syntactically incorrect,
            throws a FormulaFormatException with an explanatory Message.
            
            The associated normalizer and validator are the second and third parameters,
            respectively.  
            
            If the formula contains a variable v such that normalize(v) is not a legal variable, 
            throws a FormulaFormatException with an explanatory message. 
            
            If the formula contains a variable v such that isValid(normalize(v)) is false,
            throws a FormulaFormatException with an explanatory message.
            
            Suppose that N is a method that converts all the letters in a string to upper case, and
            that V is a method that returns true only if a string consists of one letter followed
            by one digit.  Then:
            
            new Formula("x2+y3", N, V) should succeed
            new Formula("x+y3", N, V) should throw an exception, since V(N("x")) is false
            new Formula("2x+y3", N, V) should throw an exception, since "2x+y3" is syntactically incorrect.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.Evaluate(System.Func{System.String,System.Double})">
             <summary>
             Evaluates this Formula, using the lookup delegate to determine the values of
             variables.  When a variable symbol v needs to be determined, it should be looked up
             via lookup(normalize(v)). (Here, normalize is the normalizer that was passed to 
             the constructor.)
             
             For example, if L("x") is 2, L("X") is 4, and N is a method that converts all the letters 
             in a string to upper case:
             
             new Formula("x+7", N, s => true).Evaluate(L) is 11
             new Formula("x+7").Evaluate(L) is 9
             
             Given a variable symbol as its parameter, lookup returns the variable's value 
             (if it has one) or throws an ArgumentException (otherwise).
             
             If no undefined variables or divisions by zero are encountered when evaluating 
             this Formula, the value is returned.  Otherwise, a FormulaError is returned.  
             The Reason property of the FormulaError should have a meaningful explanation.
            
             This method should never throw an exception.
             </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.GetVariables">
            <summary>
            Enumerates the normalized versions of all of the variables that occur in this 
            formula.  No normalization may appear more than once in the enumeration, even 
            if it appears more than once in this Formula.
            
            For example, if N is a method that converts all the letters in a string to upper case:
            
            new Formula("x+y*z", N, s => true).GetVariables() should enumerate "X", "Y", and "Z"
            new Formula("x+X*z", N, s => true).GetVariables() should enumerate "X" and "Z".
            new Formula("x+X*z").GetVariables() should enumerate "x", "X", and "z".
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.ToString">
            <summary>
            Returns a string containing no spaces which, if passed to the Formula
            constructor, will produce a Formula f such that this.Equals(f).  All of the
            variables in the string should be normalized.
            
            For example, if N is a method that converts all the letters in a string to upper case:
            
            new Formula("x + y", N, s => true).ToString() should return "X+Y"
            new Formula("x + Y").ToString() should return "x+Y"
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.Equals(System.Object)">
            <summary>
            If obj is null or obj is not a Formula, returns false.  Otherwise, reports
            whether or not this Formula and obj are equal.
            
            Two Formulae are considered equal if they consist of the same tokens in the
            same order.  To determine token equality, all tokens are compared as strings 
            except for numeric tokens and variable tokens.
            Numeric tokens are considered equal if they are equal after being "normalized" 
            by C#'s standard conversion from string to double, then back to string. This 
            eliminates any inconsistencies due to limited floating point precision.
            Variable tokens are considered equal if their normalized forms are equal, as 
            defined by the provided normalizer.
            
            For example, if N is a method that converts all the letters in a string to upper case:
             
            new Formula("x1+y2", N, s => true).Equals(new Formula("X1  +  Y2")) is true
            new Formula("x1+y2").Equals(new Formula("X1+Y2")) is false
            new Formula("x1+y2").Equals(new Formula("y2+x1")) is false
            new Formula("2.0 + x7").Equals(new Formula("2.000 + x7")) is true
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.op_Equality(SpreadsheetUtilities.Formula,SpreadsheetUtilities.Formula)">
            <summary>
            Reports whether f1 == f2, using the notion of equality from the Equals method.
            Note that if both f1 and f2 are null, this method should return true.  If one is
            null and one is not, this method should return false.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.op_Inequality(SpreadsheetUtilities.Formula,SpreadsheetUtilities.Formula)">
            <summary>
            Reports whether f1 != f2, using the notion of equality from the Equals method.
            Note that if both f1 and f2 are null, this method should return false.  If one is
            null and one is not, this method should return true.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.GetHashCode">
            <summary>
            Returns a hash code for this Formula.  If f1.Equals(f2), then it must be the
            case that f1.GetHashCode() == f2.GetHashCode().  Ideally, the probability that two 
            randomly-generated unequal Formulae have the same hash code should be extremely small.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.GetTokens(System.String)">
            <summary>
            Given an expression, enumerates the tokens that compose it.  Tokens are left paren;
            right paren; one of the four operator symbols; a string consisting of a letter or underscore
            followed by zero or more letters, digits, or underscores; a double literal; and anything that doesn't
            match one of those patterns.  There are no empty tokens, and no token contains white space.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.FollowTokensAreValid(System.String,System.String)">
            <summary>
            The main logic for checking if an expression is valid or not. 
            </summary>
            <param name="current"></param>
            <param name="previous"></param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.ValidateToken(System.String,System.Func{System.String,System.String},System.Func{System.String,System.Boolean})">
            <summary>
            This checks if a token is valid. If it isn't, it will throw an exception
            If it is, it will add it to the ValidTokens List
            </summary>
            <param name="s"></param>
            <param name="normalize"></param>
            <param name="isValid"></param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsTokensEmpty(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            checking if an enumerable, in this case tokens, is empty
            </summary>
            <param name="tokens"></param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.FirstTokenIsValid(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            checking for valid first token. that is, a number, left paren, or variable
            </summary>
            <param name="tokens"></param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.LastTokenIsValid(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            checking for valid last token, that is, a number, a right paren, or a variable. 
            </summary>
            <param name="tokens"></param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsNum(System.String)">
            <summary>
            Checking if the token is a number.
            It will correclty compute scientific notation
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsOp(System.String)">
            <summary>
            checking if an expression is a valid operator
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsLeftParen(System.String)">
            <summary>
            Checking if token is left paren
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsRightParen(System.String)">
            <summary>
            Checking if token is right paren
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsParen(System.String)">
            <summary>
            Checking if token is parentheses in general
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsVariable(System.String)">
            <summary>
            Checking if token is a variable, using the regex expression from GetTokens. 
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsPlusOrMinus(System.String)">
            <summary>
            Checking if the operator passed in, not the stack, is plus or minus
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsMultiplyOrDivide(System.String)">
            <summary>
            checking if operator passed in, not the stack, is plus or minus
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsPlusOrMinusOnStack(System.Collections.Generic.Stack{System.String})">
            <summary>
            Checks the top of the stack, using the IsOnTop stack extension, to see if the variable is either a '+' or '-'
            </summary>
            <param name="operandStack">The operator stack to check</param>
            <returns>True or False, based on the IsOnTop extension check for both operators</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsMultiplyOrDivideOnStack(System.Collections.Generic.Stack{System.String})">
            <summary>
            Checks the top of the stack, using the IsOnTop stack extension, to see if the variable is either a '*' or '/'. 
            Similar to IsMultiplyOrDivide
            </summary>
            <param name="operandStack">The operator stack to check</param>
            <returns>True or False, based on the IsOnTop extension check for both operators</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.ComputeValue(System.Double,System.Double,System.String)">
            <summary>
            Makes simple computations based on the values passed in and the operator to use. 
            Similar to IsPlusOrMinus
            </summary>
            <param name="value1">One of the values for computation</param>
            <param name="value2">The other value for computation</param>
            <param name="op">The operation to perform</param>
            <returns>The value of the computation after it is finished. If an incorrect operator was passed in, 0 will be returned</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.PerformPlusMinusComputation(System.Collections.Generic.Stack{System.String},System.Collections.Generic.Stack{System.Double})">
            <summary>
            Uses the Compute Value function to perform a plus or minus computation. 
            It does so by popping two values from the valueStack given,
            and using the operation from the operator stack. 
            Similar to PerformMultiplyDivideComputation
            </summary>
            <param name="operatorStack">The operator </param>
            <param name="valueStack">The value stack</param>
            <returns>The computed value</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.PerformMultiplyDivideComputation(System.Collections.Generic.Stack{System.String},System.Collections.Generic.Stack{System.Double},System.Double,System.Boolean)">
            <summary>
            Uses the Compute Value function to perform a plus or minus computation. 
            It does so by popping two values from the valueStack given,
            or by popping only one value from the valueStack, and using a value passed in.
            Similar to PerformMultiplyDivideComputation
            </summary>
            <param name="operatorStack">Operator Stack</param>
            <param name="valueStack">Value Stack</param>
            <param name="value">Value to use for computation, only if you don't want to use two variables from value stack</param>
            <param name="isTokenInt">If True, it will assume the value passed will be used for computation. If false, it will calculate with two values from value stack</param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.HandleIntOrVariable(System.Collections.Generic.Stack{System.String},System.Collections.Generic.Stack{System.Double},System.Double)">
            <summary>
            Performs the same computation for both integers and variables, when given the value. 
            </summary>
            <param name="operatorStack">Operator Stack</param>
            <param name="valueStack">value Stack</param>
            <param name="value">The value used for the computation. should come from integer token or variable token</param>
        </member>
        <member name="T:SpreadsheetUtilities.FormulaFormatException">
            <summary>
            Used to report syntactic errors in the argument to the Formula constructor.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.FormulaFormatException.#ctor(System.String)">
            <summary>
            Constructs a FormulaFormatException containing the explanatory message.
            </summary>
        </member>
        <member name="T:SpreadsheetUtilities.FormulaError">
            <summary>
            Used as a possible return value of the Formula.Evaluate method.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.FormulaError.#ctor(System.String)">
            <summary>
            Constructs a FormulaError containing the explanatory reason.
            </summary>
            <param name="reason"></param>
        </member>
        <member name="P:SpreadsheetUtilities.FormulaError.Reason">
            <summary>
             The reason why this FormulaError was created.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Extensions.IsOnTop``1(System.Collections.Generic.Stack{``0},``0)">
            <summary>
            Extension for the stack class to check if a certain value is at the top of the stack. 
            </summary>
            <typeparam name="t"></typeparam>
            <param name="stack">The stack to check</param>
            <param name="op">The value to check</param>
            <returns>True or false, depending on the value of the stack peek and the value passed in. </returns>
        </member>
    </members>
</doc>
